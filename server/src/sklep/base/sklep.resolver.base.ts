/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSklepArgs } from "./CreateSklepArgs";
import { UpdateSklepArgs } from "./UpdateSklepArgs";
import { DeleteSklepArgs } from "./DeleteSklepArgs";
import { SklepFindManyArgs } from "./SklepFindManyArgs";
import { SklepFindUniqueArgs } from "./SklepFindUniqueArgs";
import { Sklep } from "./Sklep";
import { SklepService } from "../sklep.service";

@graphql.Resolver(() => Sklep)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class SklepResolverBase {
  constructor(
    protected readonly service: SklepService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Sklep",
    action: "read",
    possession: "any",
  })
  async _sklepsMeta(
    @graphql.Args() args: SklepFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Sklep])
  @nestAccessControl.UseRoles({
    resource: "Sklep",
    action: "read",
    possession: "any",
  })
  async skleps(@graphql.Args() args: SklepFindManyArgs): Promise<Sklep[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Sklep, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Sklep",
    action: "read",
    possession: "own",
  })
  async sklep(
    @graphql.Args() args: SklepFindUniqueArgs
  ): Promise<Sklep | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sklep)
  @nestAccessControl.UseRoles({
    resource: "Sklep",
    action: "create",
    possession: "any",
  })
  async createSklep(@graphql.Args() args: CreateSklepArgs): Promise<Sklep> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Sklep)
  @nestAccessControl.UseRoles({
    resource: "Sklep",
    action: "update",
    possession: "any",
  })
  async updateSklep(
    @graphql.Args() args: UpdateSklepArgs
  ): Promise<Sklep | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Sklep)
  @nestAccessControl.UseRoles({
    resource: "Sklep",
    action: "delete",
    possession: "any",
  })
  async deleteSklep(
    @graphql.Args() args: DeleteSklepArgs
  ): Promise<Sklep | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
